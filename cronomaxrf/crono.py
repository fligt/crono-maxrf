# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/10_Exploring-the-Crono-MA-XRF-HDF5-file-format.ipynb (unless otherwise specified).

__all__ = ['report']

# Cell

import h5py
import numpy as np



def report(crono_filename, content=True):
    '''Print datasets and their content from `crono_filename`. '''

    fh = h5py.File(crono_filename, mode='r')

    groups_and_datasets = []
    fh.visit(groups_and_datasets.append)

    datasets = [fh[d] for d in groups_and_datasets if (type(fh[d]) == h5py.Dataset)]

    blob_indices = []
    for i, d in enumerate(datasets):
        if d.dtype == np.dtype('O'):
            blob_indices.append(i)
            #print(f'datasets[{i}]: {d.name}')

    # print dataset names
    hr = '-'*80
    print(hr)
    print(f'CRONO FILE: {crono_filename}\n')
    print('DATASETS: \n')
    for i, d in enumerate(datasets):

        star = ''
        if i in blob_indices:
            star = '*'

        print(f'[{i}{star}] {d.name}')
    print('')
    print(hr)
    print('CONTENT:\n')
    # print dataset names and their content

    if content:
        for i, d in enumerate(datasets):

            star = ''
            if i in blob_indices:
                star = '*'

            print(f'[{i}{star}] {d.name}')

            keys = d.attrs.keys()

            if len(keys) > 0:

                for k in keys:
                    value = d.attrs[k]
                    value, dtype = _simplify_repr(value)
                    print()
                    print(f'    {k}: {value}')
                    print(f'      dtype={dtype}')

            else:
                print()
                print(f'     {d[...].__repr__()}')

            print('')

def _simplify_repr(value):
    '''If dataset attribute `value` contains nested array of characters, then simplify representation.

    Otherwise, return default representation string.'''


    # assuming array(array(['b', 'l', 'a', 'h', ...], dtype='|S1')], dtype=object)

    if value[0].dtype == np.dtype('S1'):
        repr_string = ''.join(value[0].astype(str))
        dtype = 'nested_array_of_characters'
    else:
        repr_string = repr(value)
        dtype = value.dtype

    return repr_string, dtype
